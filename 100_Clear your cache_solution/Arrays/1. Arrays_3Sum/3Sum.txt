class Solution {
    public List<List<Integer>> threeSum(int[] num) {
        Map<Integer, Integer> map = getMapWithPos(num);
        Set<List<Integer>> item = new HashSet<>();
        Set<Integer> hs1 = new HashSet<>();
        for (int i = 0; i < num.length; i++) {
            if (!hs1.add(num[i]))
                continue;
            Set<Integer> hs2 = new HashSet<>();
            for (int k = i + 1; k < num.length; k++) {
                if (!hs2.add(num[k]))
                    continue;
                int n3 = -num[i] - num[k];
                Integer pos = map.get(n3);
                if (pos != null && pos > k) {
                    List<Integer> list = new ArrayList<>(3);
                    list.add(num[i]);
                    list.add(num[k]);
                    list.add(num[pos]);
                    Collections.sort(list);
                    item.add(list);
                }
            }
        }
        return new ArrayList<>(item);
    }
    private Map<Integer, Integer> getMapWithPos(int[] num) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = num.length - 1; i >= 0; i--) {
            if (!map.containsKey(num[i]))
                map.put(num[i], i);
        }
        return map;
    }
}

// time complexity = O(n2)
//Space complexity = O(n)